    #include <stdio.h>
    #include <stdlib.h>
    #include <time.h>
    #include <stdbool.h>
    #define SORT_BY_ARRIVAL 0
    #define SORT_BY_PID 1
    #define SORT_BY_TURN 2
    #define SORT_BY_START 3
    #define PRINT_DETAIL 1

    typedef struct {
        int iPID;
        int iArrival, iBurst, iBurst_have;
        int iStart, iFinish, iWaiting, iResponse, iTaT;
    } PCB;


void input(int numberOfProcess, PCB P[]) {
    for (int i = 0; i < numberOfProcess; i++) {
        printf("Enter Arrival Time for Process %d: ", i + 1);
        scanf("%d", &P[i].iArrival);

        printf("Enter Burst Time for Process %d: ", i + 1);
        scanf("%d", &P[i].iBurst);
        P[i].iBurst_have = P[i].iBurst;
        P[i].iPID = i + 1; // Assigning a PID for the process
    }
}


    
    void print_Process(int numberofProcess, PCB P[], int option) {
        printf("\n");
        if(option == PRINT_DETAIL){
            printf("Process\t Start\t Finish Waiting Response   TaT\n");
            for (int i = 0; i<numberofProcess; i++)
            printf("P%d\t   %d\t   %d\t   %d\t     %d\t     %d\n", P[i].iPID , P[i].iStart , P[i].iFinish, P[i].iWaiting , P[i].iResponse , P[i].iTaT);
        }
    else {
            printf("Process\t   ArrivalTime\t   BurstTime\n");
            for (int i = 0; i < numberofProcess; i++)
            {
                printf("P%d\t\t%d\t\t%d\n", P[i].iPID , P[i].iArrival , P[i].iBurst);
            }
        }
        printf("\n");   
    }
    

    void interchangeSort (PCB P[ ], int start, int end, int criteria ) {
    // sort mảng tiến trình tăng dần theo tiêu chuẩn được truyền vào với thuật toán interchangesort
    if(criteria == SORT_BY_ARRIVAL) {
            for(int i = start; i < end ; i++)
            {
                for(int j = i + 1; j <= end ; j++)
                {
                    if(P[i].iArrival > P[j].iArrival)
                    {
                        PCB tempProcess = P[j];
                        P[j] = P[i];
                        P[i] = tempProcess;
                    }
                }
            }
        }
        if(criteria == SORT_BY_PID) {
            for(int i = start; i < end ; i++)
            {
                for(int j = i + 1; j <= end ; j++)
                {
                    if(P[i].iPID > P[j].iPID)
                    {
                        PCB tempProcess = P[j];
                        P[j] = P[i];
                        P[i] = tempProcess;
                    }
                }
            }
        }

        if(criteria == SORT_BY_TURN)
        {
            PCB tempProcess = P[start];
            for(int i = start; i < end ; i++)
            {
                P[i] = P[i + 1];
            }
            P[end] = tempProcess;
        }
    }
        void drawGanttChart(PCB Process, int current, bool option, int quantumTime){
                int runtime = 0;
                if(option==0) {
                    while(runtime <= quantumTime){
                        if(runtime == quantumTime/2)
                            printf("-P%d-", Process.iPID);
                        else
                            printf("-");
                        runtime++;
                }
                printf("%d", current);
                runtime=0;
                }
                if(option==1){
                    while(runtime <= Process.iBurst_have)
                    {
                        if(runtime<= Process.iBurst_have/2)
                            printf("-P%d-", Process.iPID);
                        else
                            printf("-");
                        runtime++;   
                    }
                    printf("%d", current);
                    runtime = 0;
                }
        }

        void pushProcess(int *n, PCB P[], PCB Process) {
            P[(*n)++] = Process;
        }

        void removeProcess(int *numberOfProcess, int index, PCB P[]){
            //xóa phần tử và dồn các phần tử còn lại
            for (int i = index; i < *numberOfProcess -1; i++){
                P[i]=P[i+1];
            }
            (*numberOfProcess)--;
        }

        float calculateAWT(int numberOfProcess , PCB P[]) {
        int totalWT = 0;
        for(int i = 0; i < numberOfProcess; i++)
            totalWT += P[i].iWaiting;

        return (float)totalWT/numberOfProcess;
    }

    float calculateATaT(int numberOfProcess , PCB P[]) {
        int totalTaT = 0;
        for(int i = 0; i < numberOfProcess; i++)
            totalTaT += P[i].iTaT;
        
        return (float)totalTaT/numberOfProcess;
    }

    int current = 0;
    bool sort_rq = 1;

int main() {
    int iNumberOfProcess;
    printf("Enter the number of processes: ");
    scanf("%d", &iNumberOfProcess);

    int quantumTime;
    printf("Enter the quantum time: ");
    scanf("%d", &quantumTime);

    PCB Input[iNumberOfProcess];
    PCB ReadyQueue[iNumberOfProcess];
    PCB TerminatedArray[iNumberOfProcess];
    int iRemain = iNumberOfProcess;
    int iReady = 0, iTerminated = 0;

    input(iNumberOfProcess, Input);

       
        interchangeSort(Input, 0, iNumberOfProcess - 1, SORT_BY_ARRIVAL);
        print_Process(iRemain , Input, 0);

        pushProcess(&iReady , ReadyQueue , Input[0]);
        removeProcess(&iRemain , 0 ,Input);
        int runtime = 0;
        printf(".....GanttChart RR.....\n");

        if(ReadyQueue[0].iBurst_have > quantumTime)
        {
            ReadyQueue[0].iBurst_have -= quantumTime;
            ReadyQueue[0].iStart = ReadyQueue[0].iArrival;
            ReadyQueue[0].iResponse = ReadyQueue[0].iStart - ReadyQueue[0].iArrival;
            current = ReadyQueue[0].iStart + quantumTime;

            if(ReadyQueue[0].iStart != current)
                printf("  %d" , ReadyQueue[0].iStart);

            drawGanttChart(ReadyQueue[0], current, 0, quantumTime);
        }
        else 
        {
            ReadyQueue[0].iStart = ReadyQueue[0].iArrival;
            ReadyQueue[0].iFinish = ReadyQueue[0].iStart + ReadyQueue[0].iBurst_have;
            ReadyQueue[0].iResponse = ReadyQueue[0].iArrival;
            current= ReadyQueue[0].iFinish;
            ReadyQueue[0].iBurst_have = 0;
            sort_rq = 0;  
    
            if(ReadyQueue[0].iStart != current)
                printf("  %d" , ReadyQueue[0].iStart);

            drawGanttChart(ReadyQueue[0], current, 1, quantumTime);
        }

        while(iTerminated < iNumberOfProcess)
        {
            while(iRemain > 0)
            {
                    if(Input[0].iArrival <= current)
                    {
                        pushProcess(&iReady , ReadyQueue , Input[0]);
                        removeProcess(&iRemain , 0 ,Input);
                    }
                    else break;
            }

            if(iReady > 0)
            {
                if(ReadyQueue[0].iBurst_have > 0)
                {
                    if(sort_rq == 1 && iReady > 1)
                    {
                        interchangeSort(ReadyQueue, 0, iReady - 1, SORT_BY_TURN);
                    }
                    
                    if(ReadyQueue[0].iBurst_have == ReadyQueue[0].iBurst)
                    {
                        ReadyQueue[0].iStart = current;
                        ReadyQueue[0].iResponse = ReadyQueue[0].iStart - ReadyQueue[0].iArrival;
                    }
                    
                    if(ReadyQueue[0].iBurst_have > quantumTime)
                    {
                        ReadyQueue[0].iBurst_have -= quantumTime;
                        current += quantumTime;
                        sort_rq = 1;
                        
                        drawGanttChart(ReadyQueue[0], current, 0, quantumTime);
                    }
                    else
                    {
                        ReadyQueue[0].iFinish = current + ReadyQueue[0].iBurst_have;
                        current = ReadyQueue[0].iFinish;
                        ReadyQueue[0].iBurst_have = 0;
                        sort_rq = 0;
                    
                        drawGanttChart(ReadyQueue[0], current, 1, quantumTime);
                        
                    }
                    
                }
                else
                {
                    ReadyQueue[0].iTaT = ReadyQueue[0].iFinish - ReadyQueue[0].iArrival;
                    ReadyQueue[0].iWaiting = ReadyQueue[0].iTaT - ReadyQueue[0].iBurst;
                    pushProcess(&iTerminated, TerminatedArray, ReadyQueue[0]);
                    removeProcess(&iReady, 0, ReadyQueue);
                    continue;
                }
            }

            else
            {
                current = Input[0].iArrival;
                printf("  %d" , current);
                pushProcess(&iReady , ReadyQueue , Input[0]);
                removeProcess(&iRemain , 0 ,Input);
            }

            
        }
        
        interchangeSort(TerminatedArray, 0 , iTerminated - 1, SORT_BY_PID);
        print_Process(iTerminated, TerminatedArray, PRINT_DETAIL);
        printf("AWT: %.2f\n", calculateAWT(iTerminated, TerminatedArray));
        printf("ATaT: %.2f", calculateATaT(iTerminated, TerminatedArray));

        return 0;
    }

        